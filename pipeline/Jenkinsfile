#!groovy


// TODO:
// - make properties file global variable


pipeline {

	agent {
		label 'gmu'
	}
	environment {
		def PROJECT_NAME = "$GIT_URL".substring("$GIT_URL".lastIndexOf("/")+1, "$GIT_URL".indexOf(".git"))
	}

	stages {
	/**
		stage('export') {
			steps {
				script {
					service = input id: 'test', message: 'Select a service', ok: 'Proceed?', parameters: [choice(choices: gmuServices(), description: 'Select a service', name: 'service')]
				}
				sh 'gmu migrateOut --argFile $PROJECT_NAME.properties --serviceName ' + '"' + service +  '"' + ' --dest ' + service.substring(service.lastIndexOf("/") + 1) + '.xml'
			}
		}
	**/

		stage('What to deploy?') {
			steps {
				// Because of the illogical git structure, we have to do this to know what to deploy
				script {
					// Get the name of the gateway as it is in Git, this will be used to construct the folder path
					gateway = input id: 'gateway', message: 'Gateway to deploy to', parameters: [choice(choices: getDirectories("gateways"), description: 'choose wisely', name: 'gatewayChoice')]
					print "Gateway: " + gateway
					
					// Get the name of the service as it is in Git, this will be used to construct the folder path
					service = input id: 'service', message: 'Service to deploy', parameters: [choice(choices: getDirectories("services"), description: 'choose wisely', name: 'serviceChoice')]
					serviceName = service.getAt(0..(service.indexOf("_")) -1)
					print "service_and_version: " + service
					print "service: " + serviceName

					folderPath = "/" + getServiceDir(serviceName)
					println "folder path: " + folderPath
					// Get the folder path under which the service should be deployed
					//folderPath = input (
					//	id: 'folderPath', message: 'Path of folder under which the service should be deployed', parameters: [
					//	[$class: 'TextParameterDefinition', description: 'Path of folder in target', name: 'Folder path', defaultValue: '/']
					//])

					// Construct the migrateIn command
					migrateIn_cmd = 'gmu migrateIn --argFile Common/' + gateway + '/conf/tst.global.properties --bundle ' + service + '/' + gateway + '/src/' + serviceName + '.xml ' + '--map ' + service + '/' + gateway + '/src/' + serviceName + '-mapping.xml ' + '--template ' + service + '/' + gateway + '/conf/' + serviceName + '.properties ' + '--results results.xml ' + '-destFolder ' + folderPath
				}
			}
		}
		stage('migrateIn') {
			steps {
				sh migrateIn_cmd
			}
		}
		stage('test') {
			steps {
				sh 'testrunner.sh -j -r -a -s TestSuite $WORKSPACE/Tests/REST-Project-1-TESTCASES-soapui-project.xml'
				junit 'TEST-TestSuite.xml'
			}
		}
	}
}

// Gets the folder path in which the service is deployed within Layer 7
def getServiceDir(String serviceName) {
	sh "gmu browse -z /home/amresh/Projects/ziggo/akana/Common/NL_BSS/conf/tst.global.properties -r -showIds > gmu_list.txt"
	String contents = new File("$WORKSPACE/gmu_list.txt").text

	String returnValue = ""
	for (line in contents.readLines()) {
		def columns = line.split("\t")
		if(columns.size() == 3 && columns[0].trim() == "service") {
			if(columns[2].contains(serviceName)) {
				returnValue = columns[2].getAt(0..(columns[2].lastIndexOf("/") - 1))
			}
		}
	}
	return returnValue

}

// Input can be either services or gateways
def getDirectories(String listingType) {
	String returnValue = ""
	switch (listingType) {
		case "services":
			sh "ls | grep _ > dirs.txt"
			String contents = new File("$WORKSPACE/dirs.txt").text
			for (line in contents.readLines()) {
				returnValue += line + "\n"
			}
			break
		case "gateways":
			sh "ls Common > dirs.txt"
			String contents = new File("$WORKSPACE/dirs.txt").text
			for (line in contents.readLines()) {
				returnValue += line + "\n"
			}
			break
	}
	return returnValue
}
